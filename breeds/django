#!/bin/bash

# shellcheck source=../lib/requiem

function help {
    cat <<__EOF__

    usage: orcd django [ setup | log | restart | backup]

    setup:   Creates and configures a Django
    log:     Show debug info for current django deployments
    restart: Restarts a django server gracefully
    backup:  Backs up a given Django instance
    help:    Show this screen
__EOF__
}

source "$( dirname "${BASH_SOURCE[0]}" )/../lib/requiem"


function setup_django {

    # Get current running user
    user=$(whoami)

    # Count arguments to prevent wrong usage
    if [ "$#" -ne 3 ]; then
        echo "Illegal number of parameters"
        exit 2
    fi

    # Check for dependencies
    requirement python3
    requirement pip3
    requirement apache2

    # Install venv locally
    pip3 install venv --user

    # Set the local pip binary variable in users bashrc
    export PATH="$HOME/.local/bin:$PATH"

    # Create the project directory
    mkdir ~/"$1"
    cd ~/"$1" || exit 1

    echo "Creating virtualenv for project..."
    virtualenv "${1}env"

    echo "Activating virtual env..."
    source "${1}env/bin/activate"

    # Install django & deps in venv
    pip install django

    # Start the django project
    django-admin.py startproject "$1" .

    # Change the current ALLOWED_HOSTS variable
    sed -i 's/["server_domain_or_IP"]/["${3}"]/g' "$1"/settings.py

    # Append statics to end of file
    echo "STATIC_ROOT = os.path.join(BASE_DIR, 'static/')" >> "$1"/settings.py

    # Final touches
    echo "Attempting to make the first DB migrations"
    cd ~/"$1" || exit 1
    ./manage.py makemigrations
    ./manage.py migrate
    clear

    echo "Creating superuser for this django instance"
    ./manage.py createsuperuser
    clear
    echo "Collecting static content"
    ./manage.py collectstatic

    # Exiting venv
    echo "Your Django Instance was installed on ~/${1}..."
    echo "Exiting Virtual Environment"
    clear

    if [[ ${2} = "apache" ]] || [[ ${2} = "Apache" ]]; then
        echo "Please wait...setting up a new Apache Virtual Host"
        config_apache "$user" "$1" "$3";
        echo "Apache configured correctly"
        # Post apache config
        echo "Applying permissions to project"
        chmod 664 "~/${1}/db.sqlite3"

        echo "db.sqlite3 owner must be in the www-data group"
        echo "Elevating privileges"
        sudo chown :www-data "~/${1}"
        echo "Testing apache configuration files"
        sudo apache2ctl configtest
        echo "Restarting the Apache 2 daemon"
        sudo systemctl restart apache2

    elif [[ ${2} = "nginx" ]] || [[ ${2} = "Nginx" ]]; then
        echo "Please wait...setting up a new NGINX Virtual Block"
        config_nginx "$user" "$1" "$3";
        echo "NGINX configured correctly"
    else
        echo "Wrong server name, falling back to nginx"
        config_nginx "$user" "$1" "$3";
        echo "NGINX configured correctly"
    fi
   
}


function config_apache {
    requirement apache2;
    # $1 = user
    # $2 = project name
    # $3 = server IP / domain

    echo "Superuser permissions needed, elevating privileges..."
    sudo -s # Just suDO it
    echo "Now writing new apache Virtual Host..."
   
    cat > "/etc/apache2/sites-available/${3}.conf" <<EOL

    <VirtualHost *:80>
                 ServerName ${3}
                 Alias /static /home/${1}/${2}/static

                 <Directory /home/${1}/${2}/static>
                            Require all granted
                 </Directory>

                 <Directory /home/${1}/${2}/${2}>
                            <Files wsgi.py>
                                   Require all granted
                            </Files>
                 </Directory>

                 WSGIDaemonProcess ${2} python-home=/home/${1}/{$2}/${2}env python-path=/home/${1}/{$2}
                 WSGIProcessGroup ${2}
                 WSGIScriptAlias / /home/${1}/${2}/${2}/wsgi.py
    </VirtualHost>
EOL

    exit
}

function config_nginx {
    requirement nginx
    # $1 = user
    # $2 = project name
    # $3 = Server IP / Domain

    echo "Superuser permissions needed, elevating privileges"
    sudo -s # Just suDO it
    cat > "/etc/nginx/sites-available/${3}" <<EOL

    server {
           listen 80;
           server_name ${3};

    }
EOL
}

case $1 in
    help) help ;;

    setup)
        echo "MAKE SURE TO RUN THIS IN THE USER's DIR FOR A NEW PROJECT"
        echo "Orchid will now attempt to configure a Django instance"
        echo "but first it needs you to input the following:"

        read -pr "Please input the project name" pname
        read -pr "Are you using apache or nginx?" server
        read -pr "Please input the server domain or IP addr" pserv
        # read -pr "Choose your database engine: (Postgres | SQLite)" dbengine
        # read -pr "Please input your default port for this Django app" djport
       
        setup_django "$pname" "$server" "$pserv"
    ;;

    log);;

    restart);;

    backup);;

    *) help;;
esac

# Orchid 2020 - UpVent
