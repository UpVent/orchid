#!/usr/bin/env bash

# shellcheck source=../lib/requiem

function help {
    cat <<__EOF__

    usage: orcd nginx [ on | off | restart | debug | new | del ]

    on:      Turns on the nginx webserver
    off:     Turns off the nginx webserver
    restart: Restarts the server gracefully
    debug:   Use systemd to debug the nginx service
    new:     Writes a new server block under /etc/nginx/sites-available/
    del:     Deletes a server block under /etc/nginx/sites-available/
    backup:  Creates an NGINX backup git directory ready to use on a remote machine

__EOF__
}

source "$( dirname "${BASH_SOURCE[0]}" )/../lib/requiem"

function del_mod {
    requirement nginx
    check_root
    HOSTS_DIR="/etc/nginx/sites-available"
    echo "Please input the (URL) for this server block"
    echo "Example: example.com"
    read -r url

    SITE_DIR="/var/www/${url}"
    rm -rf "${SITE_DIR}"
    rm "${HOSTS_DIR}/${url}"
    echo "Server Block removed successfully"
}

function write_mod {
    requirement nginx
    check_root
    HOSTS_DIR="/etc/nginx/sites-available/"
    echo "Please input the (URL) for this virtual host"
    echo "Example: example.com"
    read -r url

    SITE_DIR="/var/www/${url}/"

    mkdir -p "${SITE_DIR}"
    chown -R www-data "${SITE_DIR}"

    cat > "${HOSTS_DIR}/${url}" <<EOL
    server {
           listen 80 default_server;
           listen [::]:80 default_server;

           root /var/www/${url};
           index index.html index.htm index.nginx-debian.html;

           server_name _;

           location / {
                    try_files \$uri \$uri/ =404;
           }
    }
EOL

    chmod 775 -R "${SITE_DIR}"
    echo "Server Block Written Successfully"
}

function bckup_first() {
    now=$(date)

    requirement "git";

    # Create a git directory where the files will be served
    mkdir /git
    # Assign permissions to the current user
    chown "$USER":"$USER" /git
    cd /git || exit 1 # Exit in case backup directory fails

    # Init an empty repo
    git init --bare nginx

    # Backup the current apache contents just in case
    # a mistake happens while converting the directory
    # into version controlled configuration files.
    cp -rp /etc/nginx /etc/nginx.bak

    # Move all the contents of nginx into the repository
    mv /etc/nginx/* /git/nginx

    # Warn the user about not doing stuff
    echo -e "\e[1m\e[31mDO NOT TAMPER WITH NGINX UNTIL 'SAFE' IS DISPLAYED\e[0m"

    # Remove the empty nginx directory
    rm /etc/nginx

    # Make sure nginx files are owned by root
    find /git/nginx -name '.?*' -prune -o -exec chown root:root {} +

    # Create a symlink to the repository so the nginx daemon can find it
    ln -s /git/nginx /etc/nginx

    # [DEBUG] Check if symlink was created correctly
    # ls -l /etc | grep nginx

    # Check if nginx can be reloaded properly
    # TODO: Add this to lib/requiem
    echo "There is no 'graceful' command for NGINX, expect downtime"

    systemctl nginx restart

    # Tell the user we are making the first commit 'cause yes
    echo -e "Now commiting changes..."

    # Just add everything, damn it.
    git add .
    # Create a commit message
    git commit -a -m "First NGINX Backup - Date: ${now}"
    # Push changes to the repository
    git push origin master

    echo -e "Backup process completed, NGINX is \e[1m\e[32mSAFE\e[0m"
}

function bckup() {
    now=$(date)
   
    echo "NGINX is being backed up"
    echo -e "\e[1m\e[31mDO NOT TAMPER WITH NGINX UNTIL 'SAFE' IS DISPLAYED\e[0m"

    # Make sure apache's files are owned by root
    find /git/nginx -name '.?*' -prune -o -exec chown root:root {} +

    # Tell the user we are commiting all changes they might have added
    echo -e "Now commiting /git/* changes "

    # Commit all the current configuration changes into /git
    git add .
    # Create a commit message
    git commit -a -m "NGINX Backup - Date: ${now}"
    # Push changes to the repository
    git push origin master

    echo -e "Backup process completed, NGINX is \e[1m\e[32mSAFE\e[0m"
}

case $1 in
    help) help ;;

    on)
        check_root
        systemctl start nginx && systemctl enable nginx ;;

    off)
        check_root
        systemctl stop nginx ;;

    restart)
        check_root
        systemctl reload nginx ;;

    debug)
        check_root
        journalctl -u nginx ;;

    new)
        check_root
        echo "This will assume you'll configure SSL later";
        write_mod ;;

    del)
        check_root
        echo "This may result in data loss!";
        del_mod;;

    backup)
        check_root
        echo "Checking if a backup was created previously"

        DIR="/git/.git"

        if [ ! -f "$DIR" ]; then
            echo "Make sure to git clone the resulting repo in a remote machine where the backup can be stored"
            bckup_first;
            echo "First apache backup succeeded! Please check /git"
        elif [ -d "$DIR" ]; then
            bckup
            echo "NGINX backup succeeded!"
        else
            echo "Unhandled error"
            exit 1
        fi
        ;;

    *) help;;
esac
# 2020 - UpVent
